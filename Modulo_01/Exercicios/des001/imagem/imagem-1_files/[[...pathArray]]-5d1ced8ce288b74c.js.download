(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[901],{68393:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/[[...pathArray]]",function(){return t(75468)}])},75468:function(e,n,t){"use strict";t.r(n),t.d(n,{__N_SSG:function(){return eF},default:function(){return eH}});var r=t(85893),a=t(9008),o=t.n(a),s=t(67294),i=t(4298),c=t.n(i),l=t(27779),d=t(15845),u=t(47752),h=t(98239),p=t(77682),g=t(66511),m=t(63900),j=t(52170),x=t(48439),f=t(65012),v=t(57706),w=t(81346),y=t(73553),z=t(32173),_=t(56932),b=t(98710),S=t(72201),C=t(43119),E=t(76294),I=t(31466),M=t(31980),N=t(55901),T=t(78236),k=t(14899),R=t(37917),L=t(24882),B=t(28252),D=t(60206),P=t(58339),U=t(77221),A=t(62220),O=t(14887),q=t(34443),K=t(66225),F=t(13082),H=t(99302),W=t(10018),G=t(296),J=t(23572),V=t(3141),Z=t(83608),X=t(90028),Q=t(29567),$=t(19782),Y=t(22421),ee=t(13647),en=t(92417),et=t(86062),er=t(2882),ea=t(36579),eo=t(57233),es=t(16909),ei=t(96539),ec=t(82857),el=t(62198),ed=t(27688),eu=t(1604);let eh=eu.z.intersection(eu.z.object({type:eu.z.string()}),eu.z.record(eu.z.string(),eu.z.unknown())),ep=eu.z.object({locale:eu.z.string(),url:eu.z.string()}),eg=eu.z.object({contentId:eu.z.string(),contentLocale:eu.z.string(),contentCategory:eu.z.string().optional(),version:eu.z.number().optional(),rev:eu.z.string().optional(),publishDate:eu.z.string().refine(e=>!isNaN(Date.parse(e)),{message:"publishDate must be a valid date string"})}),em=eu.z.object({id:eu.z.string()}),ej=eu.z.object({icon:eu.z.string(),size:eu.z.string()});eu.z.object({id:eu.z.string(),translationId:eu.z.string(),locale:eu.z.string(),url:eu.z.string().url(),theme:em,blades:eu.z.array(eh),title:eu.z.string().optional(),description:eu.z.string().optional(),canonicalUrl:eu.z.string().url().optional(),metaImage:eu.z.record(eu.z.unknown()).optional(),analytics:eg.optional(),hreflangs:eu.z.array(ep).optional(),favicon:eu.z.record(eu.z.string(),eu.z.array(ej)).optional(),osanoPolicyId:eu.z.string().optional(),gtmContainerId:eu.z.string().optional(),warnings:eu.z.array(eu.z.string()).optional()}),eu.z.array(eu.z.object({loc:eu.z.string().optional(),lastMod:eu.z.string().optional(),changeFreq:eu.z.string().optional(),priority:eu.z.string().optional(),hreflangs:eu.z.array(ep).optional()}));var ex=t(28578);class ef extends Error{constructor(e,n,t){super(e),this.cause=n,this.input=t}}var ev=t(64965),ew=t(63033),ey=t.n(ew);let ez=e=>{let{environment:n,error:t}=e;return["test","preview"].includes(n)?(0,r.jsxs)("div",{"data-testid":"error-blade",className:ey().wrapper,children:[(0,r.jsx)("h2",{className:ey().heading,children:"Problem rendering blade"}),t instanceof ef?(0,r.jsxs)("pre",{className:ey().errorMessage,children:[(0,ev.CC)(t.cause,{issueSeparator:"\n * ",prefix:t.message,prefixSeparator:":\n * ",unionSeparator:"\n    or "}).toString(),"\n\n","Input Blade data:","\n",JSON.stringify(t.input,null,2)]}):(0,r.jsx)("pre",{className:ey().errorMessage,children:String(t)})]}):null};function e_(e){let{index:n,...t}=e;try{let{type:e,...a}=function(e,n){try{return ex.J.parse(e)}catch(t){if(t instanceof eu.jm)throw new ef("Invalid Blade data from blade [".concat(n+1,":").concat(e.type,"]"),t,e);throw Error("Invalid Blade shape from blade [".concat(n+1,":").concat(e.type,"]: ").concat(t," ").concat(JSON.stringify(e)),{cause:t})}}(t,n);switch(e){case"articleCardCarousel":return(0,r.jsx)(v.C,{...a});case"articleCardGrid":return(0,r.jsx)(w.mJ,{...a});case"articleMasthead":return(0,r.jsx)(y.x,{...a});case"articleMediaCarousel":return(0,r.jsx)(z.E,{...a});case"articleMediaEmbed":return(0,r.jsx)(_.Q,{...a});case"articleMediaGallery":return(0,r.jsx)(b.M,{...a});case"articlePromoCardGrid":return(0,r.jsx)(S.If,{...a});case"articleRichTextAccordion":return(0,r.jsx)(C.U,{...a});case"assetHighlight":return(0,r.jsx)(E.b,{...a});case"audioPlayer":return(0,r.jsx)(I.z,{...a});case"centeredPromotion":return(0,r.jsx)(M.t,{...a});case"centerPromoMasthead":return(0,r.jsx)(N.m,{...a});case"characterCardGrid":return(0,r.jsx)(T.U2,{...a});case"characterChanges":return(0,r.jsx)(k.R,{...a});case"characterMasthead":return(0,r.jsx)(R.P,{...a});case"chooseFighter":return(0,r.jsx)(L.U,{...a});case"emailSubscribe":return(0,r.jsx)(B.jo,{...a});case"featuredNewsCarousel":return(0,r.jsx)(D.T,{...a});case"fullWidthImage":return(0,r.jsx)(P.i,{...a});case"gameBetaMasthead":return(0,r.jsx)(U.O,{...a});case"gameDetailMasthead":return(0,r.jsx)(A.Qy,{...a});case"gameSimpleMasthead":return(0,r.jsx)(O.J,{...a});case"gameSpecs":return(0,r.jsx)(q.ai,{...a});case"iconTab":return(0,r.jsx)(K.z0,{...a});case"imageCarousel":return(0,r.jsx)(F.L,{...a});case"landingMediaCarousel":return(0,r.jsx)(H.Y,{...a});case"landingMediaEmbed":return(0,r.jsx)(W.G,{...a});case"landingPromoCardCarousel":return(0,r.jsx)(G.T,{...a});case"landingRichTextAccordion":return(0,r.jsx)(J.o,{...a});case"mediaPromo":return(0,r.jsx)(V.WK,{...a});case"articleRichText":return(0,r.jsx)(Z.r,{...a});case"patchNotesRichText":return(0,r.jsx)(X.R,{...a});case"landingRichText":return(0,r.jsx)(Q.P,{...a});case"riotbar":return"productId"in a&&"false"!==String(a.productId)?(0,r.jsx)($.$o,{...a}):null;case"separator":return(0,r.jsx)(Y.P,{...a});case"textMarquee":return(0,r.jsx)(ee.I$,{...a});case"textMasthead":return(0,r.jsx)(en.x,{...a});case"betaCenteredMasthead":return(0,r.jsx)(et.m,{...a});case"betaConnectConsoleMasthead":return(0,r.jsx)(er._,{...a});case"betaInviteMediaPromo":return(0,r.jsx)(ea.G,{...a});case"betaKeyDisplayMasthead":return(0,r.jsx)(eo.T,{...a});case"betaSuccessMasthead":return(0,r.jsx)(es.J,{...a});case"betaRegistrationMasthead":return(0,r.jsx)(ei.N,{...a});case"mediaMasthead":return(0,r.jsx)(ec.I,{...a});case"platformSelectionMasthead":return(0,r.jsx)(el.K,{...a});default:throw Error("Unexpected blade type: ".concat(e))}}catch(e){return console.error(e),e instanceof Error&&ed.q.noticeError(e),(0,r.jsx)(ez,{environment:t.environment,error:e})}}let eb=["test","preview"];class eS extends s.Component{static getDerivedStateFromError(e){return{hasError:!0,error:e}}componentDidCatch(e,n){console.error(e,n),e instanceof Error&&ed.q.noticeError(e)}render(){return this.state.hasError?eb.includes(this.state.environment)?(0,r.jsx)(ez,{error:this.state.error,environment:this.state.environment}):null:this.props.children}constructor(e){super(e),this.state={hasError:!1,error:null,environment:"live"},this.state.environment=e.environment||"live"}}function eC(e){let{blades:n,environment:t,locale:a}=e;return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("header",{children:(0,r.jsx)("div",{id:"riotbar-header"})}),null==n?void 0:n.map((e,o)=>{let s="".concat(o+1,":").concat(n.length);return(0,r.jsx)(eS,{environment:t,children:(0,r.jsx)(x.n,{blade:{id:e.type,type:e.type,position:s},uiLocation:"blade[".concat(o+1,":").concat(n.length,"]/").concat(e.type),children:(0,r.jsx)(e_,{locale:a,environment:t,index:o,...e})},"".concat(e.type,"-").concat(s))},"".concat(e.type,"-").concat(s))}),(0,r.jsx)("footer",{children:(0,r.jsx)("div",{id:"riotbar-footer"})})]})}let eE=t(19521).ZP.div.withConfig({componentId:"sc-af2cef1d-0"})([""]),eI=e=>{let{locale:n="en-us"}=e,t={"en-us":{title:"AVAILABLE ON"},"de-de":{title:"VERF\xdcGBAR ALS"},"es-es":{title:"DISPONIBLE EN"},"fr-fr":{title:"DISPONIBLE SUR"},"ja-jp":{title:"リリース中"},"pt-br":{title:"DISPON\xcdVEL EM"},"ko-kr":{title:"이용 가능"}},a=n in t?t[n].title:t["en-us"].title;return(0,r.jsx)(eE,{title:a})},eM=e=>{let{environment:n,warnings:t}=e;return["test","preview"].includes(n)&&t.length>0?(console.warn(t.join("\n")),(0,r.jsxs)("div",{"data-testid":"error-blade",className:ey().warningWrapper,id:"dev-all-warnings",children:[(0,r.jsx)("a",{href:"#dev-all-warnings",className:ey().anchor,children:"!"}),(0,r.jsx)("h2",{className:ey().heading,children:"Warnings"}),t.map((e,n)=>(0,r.jsxs)("pre",{className:ey().errorMessage,children:["- ",e]},n))]})):null};var eN=t(11227),eT=t.n(eN),ek=t(17686),eR=t(65064),eL=t(46819),eB=t(4837),eD=t(86571),eP=t(74199);let eU=eT()("pubhub:sdk:use-hub-sdk"),eA={LeagueClient:eR.B,lor:eL.D,tftm:eB.S,RiotClient:eD.z,RiotMobile:eP.u};var eO=t(43874);let eq=e=>{let{sdk:n,children:t}=e;return n?(0,r.jsx)(eO.B,{sdk:n,children:t}):(0,r.jsx)(r.Fragment,{children:t})},eK={ArcaneChroma:l.r,LoLChroma:d.S,TFTChroma:u.Z,ValorantChroma:h.p,WildRiftChroma:p.R,RiotProduct2xkoBaseChroma:g.s,leagueClientBaseTheme:m.D,riotProductLionBaseChroma:g.s};var eF=!0;function eH(e){var n,t,a,i,l,d,u,h,p;let{page:g,environment:m,datadogData:v,shouldRenderAvailability:w,pubHubSdkHost:y}=e,z=eK[g.theme.id];if(!z)throw Error("Unsupported theme: ".concat(g.theme.id));let _=(null==g?void 0:g.gtmContainerId)&&g.gtmContainerId.replace(/[^a-zA-Z0-9-./]/g,""),b=function(e,n){let[t,r]=(0,s.useState)(null),a=(0,s.useMemo)(()=>n,[n]),o=(0,s.useCallback)(()=>e&&e in eA?eA[e]:(console.warn("Invalid or missing PUBHUB_SDK_HOST: ".concat(e)),null),[e]),i=(0,s.useRef)(null);return(0,s.useEffect)(()=>{let e=o();if(!e){i.current=null;return}if(i.current===e)return;i.current=e;let n=n=>{ed.q.noticeError(n,{sdkFactory:e.name})},t=setTimeout(()=>{eU("SDK timeout executed: ".concat(t)),n(new ek.OA("Timeout initializing HubSDK"))},25e3);eU("SDK timeout set: ".concat(t));let s=e(a);return s.then(e=>{r(e),ed.q.registerSdkReady(e.options)}).catch(n).finally(()=>{eU("SDK timeout cleared: ".concat(t)),clearTimeout(t)}),()=>{eU("Cleanup: SDK timeout cleared: ".concat(t)),clearTimeout(t),s.then(e=>e.destroy())}},[o,a]),t}(y,{env:m,publishingLocale:g.locale});return(0,r.jsxs)("div",{children:[(0,r.jsxs)(o(),{children:[(0,r.jsx)("title",{children:g.title}),(0,r.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1"}),(0,r.jsx)("meta",{name:"description",content:g.description}),null===(n=g.hreflangs)||void 0===n?void 0:n.map(e=>(0,r.jsx)("link",{rel:"alternate",href:e.url,hrefLang:e.locale},e.locale)),g.url?(0,r.jsx)("link",{rel:"canonical",href:g.url}):null,(0,r.jsx)("meta",{property:"og:url",content:g.url}),(0,r.jsx)("meta",{property:"og:title",content:g.title}),(0,r.jsx)("meta",{property:"og:description",content:g.description}),(0,r.jsx)("meta",{property:"og:image",content:"".concat(null===(t=g.metaImage)||void 0===t?void 0:t.url,"?w=1200&h=630&fm=webp&fit=crop&crop=center")}),(0,r.jsx)("meta",{property:"og:locale",content:g.locale}),null===(i=g.favicon)||void 0===i?void 0:null===(a=i.icon)||void 0===a?void 0:a.map((e,n)=>(0,r.jsx)("link",{rel:"icon",href:e.icon,sizes:e.size},"icon-".concat(n))),null===(d=g.favicon)||void 0===d?void 0:null===(l=d.appleTouch)||void 0===l?void 0:l.map((e,n)=>(0,r.jsx)("link",{rel:"apple-touch-icon",href:e.icon,sizes:e.size},"apple-touch-icon-".concat(n))),null===(h=g.favicon)||void 0===h?void 0:null===(u=h.shortcut)||void 0===u?void 0:u.map((e,n)=>(0,r.jsx)("link",{rel:"shortcut icon",href:e.icon,sizes:e.size},"shortcut-icon-".concat(n))),(0,r.jsx)("script",{id:"google-consent-script",dangerouslySetInnerHTML:{__html:"try {\n              window.dataLayer = window.dataLayer ||[];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('consent','default',{\n                'ad_storage':'denied',\n                'analytics_storage':'denied',\n                'ad_user_data':'denied',\n                'ad_personalization':'denied',\n                'wait_for_update': 500\n              });\n              gtag(\"set\", \"ads_data_redaction\", true);\n            } catch(e) {}"}}),g.osanoPolicyId&&(0,r.jsx)("script",{id:"osano-script",src:"https://cmp.osano.com/16BZ95S4qp9Kl2gUA/".concat(g.osanoPolicyId,"/osano.js")}),(0,r.jsx)("script",{id:"google-tag-manager",dangerouslySetInnerHTML:{__html:"(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n        new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n        j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n        'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n        })(window,document,'script','dataLayer','".concat(_,"');")}})]}),(null==v?void 0:v.serviceName)&&(null==v?void 0:v.clientToken)&&(null==v?void 0:v.applicationId)&&(0,r.jsx)(c(),{id:"dd-browser-agent",dangerouslySetInnerHTML:{__html:"(function(h,o,u,n,d) {\n              h=h[d]=h[d]||{q:[],onReady:function(c){h.q.push(c)}}\n              d=o.createElement(u);d.async=1;d.src=n\n              n=o.getElementsByTagName(u)[0];n.parentNode.insertBefore(d,n)\n            })(window,document,'script','https://www.datadoghq-browser-agent.com/us1/v5/datadog-rum.js','DD_RUM')\n            window.DD_RUM.onReady(function() {\n              window.DD_RUM.init({\n                clientToken: '".concat(v.clientToken,"',\n                applicationId: '").concat(v.applicationId,"',\n                site: 'datadoghq.com',\n                service: '").concat(v.serviceName,"',\n                env: '").concat(m,"',\n                sessionSampleRate: 20,\n                sessionReplaySampleRate: 3,\n                trackUserInteractions: true,\n                trackResources: true,\n                trackLongTasks: true,\n                defaultPrivacyLevel: 'mask-user-input',\n              });\n            })")}}),(0,r.jsxs)("main",{children:[_&&(0,r.jsx)("noscript",{dangerouslySetInnerHTML:{__html:"<iframe\n              src='https://www.googletagmanager.com/ns.html?id=".concat(_,'\'\n              height="0"\n              width="0"\n              style="display: none; visibility: hidden;"></iframe>')}}),(0,r.jsx)(eq,{sdk:b,children:(0,r.jsx)(j.a,{skin:z,locale:g.locale,dir:"ar-ae"===g.locale?"rtl":"ltr",environment:m,children:(0,r.jsx)(x.n,{page:{id:g.translationId,url:g.url,locale:g.locale||"en-us",version:"2"},children:(0,r.jsxs)(f.c,{children:[(0,r.jsx)(eC,{blades:g.blades,locale:g.locale||"en-us",environment:m}),w&&(0,r.jsx)(eI,{locale:g.locale}),(null===(p=g.warnings)||void 0===p?void 0:p.length)?(0,r.jsx)(eM,{environment:m,warnings:g.warnings}):null]})})})})]})]})}},63033:function(e){e.exports={wrapper:"ErrorBlade_wrapper__fSPF5",heading:"ErrorBlade_heading__O6o4J",errorMessage:"ErrorBlade_errorMessage__WX8JH",warningWrapper:"ErrorBlade_warningWrapper__2cvS8",anchor:"ErrorBlade_anchor__1IWj_"}},22868:function(){},14777:function(){},99830:function(){},70209:function(){}},function(e){e.O(0,[424,888,774,179],function(){return e(e.s=68393)}),_N_E=e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,